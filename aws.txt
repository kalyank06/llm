AWS Lambda is a compute service that lets you run code without provisioning or managing servers.
Lambda runs your code on a high-availability compute infrastructure and performs all of the administration of the compute resources, including server and operating system maintenance, capacity provisioning and automatic scaling, and logging. With Lambda, all you need to do is supply your code in one of the language runtimes that Lambda supports. You organize your code into Lambda functions. The Lambda service runs your function only when needed and scales automatically. You only pay for the compute time that you consume—there is no charge when your code is not running. For more information, see AWS Lambda Pricing. When to use AWS lambda? Lambda is an ideal compute service for application scenarios that need to scale up rapidly, and scale down to zero when not in demand. For example, you can use Lambda for: File processing: Use Amazon Simple Storage Service (Amazon S3) to trigger Lambda data processing in real time after an upload.

Stream processing: Use Lambda and Amazon Kinesis to process real-time streaming data for application activity tracking, transaction order processing, clickstream analysis, data cleansing, log filtering, indexing, social media analysis, Internet of Things (IoT) device data telemetry, and metering.

Web applications: Combine Lambda with other AWS services to build powerful web applications that automatically scale up and down and run in a highly available configuration across multiple data centers.

IoT backends: Build serverless backends using Lambda to handle web, mobile, IoT, and third-party API requests.

Mobile backends: Build backends using Lambda and Amazon API Gateway to authenticate and process API requests. Use AWS Amplify to easily integrate with your iOS, Android, Web, and React Native frontends.
When using Lambda, you are responsible only for your code. Lambda manages the compute fleet that offers a balance of memory, CPU, network, and other resources to run your code. Because Lambda manages these resources, you cannot log in to compute instances or customize the operating system on provided runtimes.

Lambda performs operational and administrative activities on your behalf, including managing capacity, monitoring, and logging your Lambda functions.

If you do need to manage your compute resources, AWS has other compute services to consider, such as:

AWS App Runner builds and deploys containerized web applications automatically, load balances traffic with encryption, scales to meet your traffic needs, and allows for the configuration of how services are accessed and communicate with other AWS applications in a private Amazon VPC.

AWS Fargate with Amazon ECS runs containers without having to provision, configure, or scale clusters of virtual machines.

Amazon EC2 lets you customize operating system, network and security settings, and the entire software stack. You are responsible for provisioning capacity, monitoring fleet health and performance, and using Availability Zones for fault tolerance.

Key features

The following key features help you develop Lambda applications that are scalable, secure, and easily extensible:

Environment variables
Use environment variables to adjust your function's behavior without updating code.

Versions
Manage the deployment of your functions with versions, so that, for example, a new function can be used for beta testing without affecting users of the stable production version.

Container images
Create a container image for a Lambda function by using an AWS provided base image or an alternative base image so that you can reuse your existing container tooling or deploy larger workloads that rely on sizable dependencies, such as machine learning.

Layers
Package libraries and other dependencies to reduce the size of deployment archives and makes it faster to deploy your code.

Lambda extensions
Augment your Lambda functions with tools for monitoring, observability, security, and governance.

Function URLs
Add a dedicated HTTP(S) endpoint to your Lambda function.

Response streaming
Configure your Lambda function URLs to stream response payloads back to clients from Node.js functions, to improve time to first byte (TTFB) performance or to return larger payloads.

Concurrency and scaling controls
Apply fine-grained control over the scaling and responsiveness of your production applications.

Code signing
Verify that only approved developers publish unaltered, trusted code in your Lambda functions

Private networking
Create a private network for resources such as databases, cache instances, or internal services.

File system access
Configure a function to mount an Amazon Elastic File System (Amazon EFS) to a local directory, so that your function code can access and modify shared resources safely and at high concurrency.

Lambda SnapStart for Java
Improve startup performance for Java runtimes by up to 10x at no extra cost, typically with no changes to your function code.

Getting started with Lambda
To get started with Lambda, use the Lambda console to create a function. In a few minutes, you
can create and deploy a function and test it in the console.
As you carry out the tutorial, you'll learn some fundamental Lambda concepts, like how to pass
arguments to your function using the Lambda event object. You'll also learn how to return log
outputs from your function, and how to view your function's invocation logs in CloudWatch Logs.
To keep things simple, you create your function using either the Python or Node.js runtime. With
these interpreted languages, you can edit function code directly in the console's built-in code
editor. With compiled languages like Java and C#, you need to create a deployment package on
your local build machine and upload it to Lambda. To learn about deploying functions to Lambda
using other runtimes, see the links in the the section called “Additional resources and next steps”
section.

Create a Lambda function with the console
In this example, your function takes a JSON object containing two integer values labeled
"length" and "width". The function multiplies these values to calculate an area and returns this
as a JSON string.
Your function also prints the calculated area, along with the name of its CloudWatch log group.
Later in the tutorial, you’ll learn to use CloudWatch Logs to view records of your functions’
invocation.
To create your function, you first use the console to create a basic Hello world function. In the
following step, you then add your own function code.
To create a Hello world Lambda function with the console
1. Open the Functions page of the Lambda console.
2. Choose Create function.
3. Select Author from scratch.
4. In the Basic information pane, for Function name enter myLambdaFunction.
5. For Runtime, choose either Node.js 20.x or Python 3.12
6. Leave architecture set to x86_64 and choose Create function.
Lambda creates a function that returns the message Hello from Lambda! Lambda also creates
an execution role for your function. An execution role is an AWS Identity and Access Management
(IAM) role that grants a Lambda function permission to access AWS services and resources. For your
function, the role that Lambda creates grants basic permissions to write to CloudWatch Logs.
You now use the console's built-in code editor to replace the Hello world code that Lambda created
with your own function code.
Create a Lambda function with the console 6
AWS Lambda Developer Guide
Node.js
To modify the code in the console
1. Choose the Code tab.
In the console's built-in code editor, you should see the function code that Lambda created.
If you don't see the index.mjs tab in the code editor, select index.mjs in the file explorer as
shown on the following diagram.
2. Paste the following code into the index.mjs tab, replacing the code that Lambda created.
export const handler = async (event, context) => {

 const length = event.length;
 const width = event.width;
 let area = calculateArea(length, width);
 console.log(`The area is ${area}`);

 console.log('CloudWatch log group: ', context.logGroupName);

 let data = {
 "area": area,
 };
 return JSON.stringify(data);

 function calculateArea(length, width) {
 return length * width;
 }
Create a Lambda function with the console 7
AWS Lambda Developer Guide
};
3. Select Deploy to update your function's code. When Lambda has deployed the changes, the
console displays a banner letting you know that it's successfully updated your function.

Understanding your function code
Before you move to the next step, let's take a moment to look at the function code and
understand some key Lambda concepts.
• The Lambda handler:
Your Lambda function contains a Node.js function named handler. A Lambda function in
Node.js can contain more than one Node.js function, but the handler function is always the
entry point to your code. When your function is invoked, Lambda runs this method.
When you created your Hello world function using the console, Lambda automatically set the
name of the handler method for your function to handler. Be sure not to edit the name of
this Node.js function. If you do, Lambda won’t be able to run your code when you invoke your
function.
To learn more about the Lambda handler in Node.js, see the section called “Handler”.
• The Lambda event object:
The function handler takes two arguments, event and context. An event in Lambda is a
JSON formatted document that contains data for your function to process.
If your function is invoked by another AWS service, the event object contains information
about the event that caused the invocation. For example, if an Amazon Simple Storage
Service (Amazon S3) bucket invokes your function when an object is uploaded, the event will
contain the name of the Amazon S3 bucket and the object key.
In this example, you’ll create an event in the console by entering a JSON formatted document
with two key-value pairs.
• The Lambda context object:
The second argument your function takes is context. Lambda passes the context object to
your function automatically. The context object contains information about the function
invocation and execution environment.
Create a Lambda function with the console 8
AWS Lambda Developer Guide
You can use the context object to output information about your function's invocation for
monitoring purposes. In this example, your function uses the logGroupName parameter to
output the name of its CloudWatch log group.
To learn more about the Lambda context object in Node.js, see the section called “Context”.
• Logging in Lambda:
With Node.js, you can use console methods like console.log and console.error to send
information to your function's log. The example code uses console.log statements to
output the calculated area and the name of the function's CloudWatch Logs group. You can
also use any logging library that writes to stdout or stderr.
To learn more, see the section called “Logging”. To learn about logging in other runtimes, see
the 'Building with' pages for the runtimes you're interested in.
Python
To modify the code in the console
1. Choose the Code tab.
In the console's built-in code editor, you should see the function code that Lambda created.
If you don't see the lambda_function.py tab in the code editor, select lambda_function.py
in the file explorer as shown on the following diagram.
Create a Lambda function with the console 9
AWS Lambda Developer Guide
2. Paste the following code into the lambda_function.py tab, replacing the code that Lambda
created.
import json
import logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)
def lambda_handler(event, context):

 # Get the length and width parameters from the event object. The
 # runtime converts the event object to a Python dictionary
 length=event['length']
 width=event['width']

 area = calculate_area(length, width)
 print(f"The area is {area}")

 logger.info(f"CloudWatch logs group: {context.log_group_name}")

 # return the calculated area as a JSON string
 data = {"area": area}
 return json.dumps(data)

def calculate_area(length, width):
 return length*width
3. Select Deploy to update your function's code. When Lambda has deployed the changes, the
console displays a banner letting you know that it's successfully updated your function.
Understanding your function code
Before you move to the next step, let's take a moment to look at the function code and
understand some key Lambda concepts.
• The Lambda handler:
Your Lambda function contains a Python function named lambda_handler. A Lambda
function in Python can contain more than one Python function, but the handler function
is always the entry point to your code. When your function is invoked, Lambda runs this
method.
Create a Lambda function with the console 10
AWS Lambda Developer Guide
When you created your Hello world function using the console, Lambda automatically set the
name of the handler method for your function to lambda_handler. Be sure not to edit the
name of this Python function. If you do, Lambda won’t be able to run your code when you
invoke your function.
To learn more about the Lambda handler in Python, see the section called “Handler”.
• The Lambda event object:
The function lambda_handler takes two arguments, event and context. An event in
Lambda is a JSON formatted document that contains data for your function to process.
If your function is invoked by another AWS service, the event object contains information
about the event that caused the invocation. For example, if an Amazon Simple Storage
Service (Amazon S3) bucket invokes your function when an object is uploaded, the event will
contain the name of the Amazon S3 bucket and the object key.
In this example, you’ll create an event in the console by entering a JSON formatted document
with two key-value pairs.
• The Lambda context object:
The second argument your function takes is context. Lambda passes the context object to
your function automatically. The context object contains information about the function
invocation and execution environment.
You can use the context object to output information about your function's invocation for
monitoring purposes. In this example, your function uses the log_group_name parameter to
output the name of its CloudWatch log group.
To learn more about the Lambda context object in Python, see the section called “Context”.
• Logging in Lambda:
With Python, you can use either a print statement or a Python logging library to send
information to your function's log. To illustrate the difference in what's captured, the example
code uses both methods. In a production application, we recommend that you use a logging
library.
To learn more, see the section called “Logging”. To learn about logging in other runtimes, see
the 'Building with' pages for the runtimes you're interested in.

Invoke the Lambda function using the console
To invoke your function using the Lambda console, you first create a test event to send to your
function. The event is a JSON formatted document containing two key-value pairs with the keys
"length" and "width".
To create the test event
1. In the Code source pane, choose Test.
2. Select Create new event.
3. For Event name enter myTestEvent.
4. In the Event JSON panel, replace the default values by pasting in the following:
{
 "length": 6,
 "width": 7
}
5. Choose Save.
You now test your function and use the Lambda console and CloudWatch Logs to view records of
your function’s invocation.
To test your function and view invocation records in the console
• In the Code source pane, choose Test. When your function finishes running, you’ll see the
response and function logs displayed in the Execution results tab. You should see results
similar to the following.
Node.js
Test Event Name
myTestEvent
Response
"{\"area\":42}"
Function Logs
START RequestId: 5c012b0a-18f7-4805-b2f6-40912935034a Version: $LATEST
Invoke the Lambda function using the console 12
AWS Lambda Developer Guide
2023-08-31T23:39:45.313Z 5c012b0a-18f7-4805-b2f6-40912935034a INFO The area is
 42
2023-08-31T23:39:45.331Z 5c012b0a-18f7-4805-b2f6-40912935034a INFO CloudWatch
 log group: /aws/lambda/myLambdaFunction
END RequestId: 5c012b0a-18f7-4805-b2f6-40912935034a
REPORT RequestId: 5c012b0a-18f7-4805-b2f6-40912935034a Duration: 20.67 ms Billed
 Duration: 21 ms Memory Size: 128 MB Max Memory Used: 66 MB Init Duration:
 163.87 ms
Request ID
5c012b0a-18f7-4805-b2f6-40912935034a
Python
Test Event Name
myTestEvent
Response
"{\"area\": 42}"
Function Logs
START RequestId: 2d0b1579-46fb-4bf7-a6e1-8e08840eae5b Version: $LATEST
The area is 42
[INFO] 2023-08-31T23:43:26.428Z 2d0b1579-46fb-4bf7-a6e1-8e08840eae5b CloudWatch
 logs group: /aws/lambda/myLambdaFunction
END RequestId: 2d0b1579-46fb-4bf7-a6e1-8e08840eae5b
REPORT RequestId: 2d0b1579-46fb-4bf7-a6e1-8e08840eae5b Duration: 1.42 ms Billed
 Duration: 2 ms Memory Size: 128 MB Max Memory Used: 39 MB Init Duration: 123.74
 ms
Request ID
2d0b1579-46fb-4bf7-a6e1-8e08840eae5b
In this example, you invoked your code using the console's test feature. This means that you can
view your function's execution results directly in the console. When your function is invoked outside
the console, you need to use CloudWatch Logs.
